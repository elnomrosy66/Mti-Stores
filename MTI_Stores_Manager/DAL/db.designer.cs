#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MTI_Stores_Manager.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Stores")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertitem(item instance);
    partial void Updateitem(item instance);
    partial void Deleteitem(item instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertstore(store instance);
    partial void Updatestore(store instance);
    partial void Deletestore(store instance);
    partial void Insertunite(unite instance);
    partial void Updateunite(unite instance);
    partial void Deleteunite(unite instance);
    partial void Insertunites_relation(unites_relation instance);
    partial void Updateunites_relation(unites_relation instance);
    partial void Deleteunites_relation(unites_relation instance);
    partial void Insertuser_store(user_store instance);
    partial void Updateuser_store(user_store instance);
    partial void Deleteuser_store(user_store instance);
    partial void Insertmovement(movement instance);
    partial void Updatemovement(movement instance);
    partial void Deletemovement(movement instance);
    partial void Insertmovements_header(movements_header instance);
    partial void Updatemovements_header(movements_header instance);
    partial void Deletemovements_header(movements_header instance);
    #endregion
		
		public dbDataContext() : 
				base(global::MTI_Stores_Manager.Properties.Settings.Default.StoresConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<item> items
		{
			get
			{
				return this.GetTable<item>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<store> stores
		{
			get
			{
				return this.GetTable<store>();
			}
		}
		
		public System.Data.Linq.Table<unite> unites
		{
			get
			{
				return this.GetTable<unite>();
			}
		}
		
		public System.Data.Linq.Table<unites_relation> unites_relations
		{
			get
			{
				return this.GetTable<unites_relation>();
			}
		}
		
		public System.Data.Linq.Table<user_store> user_stores
		{
			get
			{
				return this.GetTable<user_store>();
			}
		}
		
		public System.Data.Linq.Table<movement> movements
		{
			get
			{
				return this.GetTable<movement>();
			}
		}
		
		public System.Data.Linq.Table<movements_header> movements_headers
		{
			get
			{
				return this.GetTable<movements_header>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.items")]
	public partial class item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private int _store_id;
		
		private string _locker;
		
		private string _row;
		
		private string _cell;
		
		private int _main_unit;
		
		private int _rate;
		
		private int _requestLimit;
		
		private EntitySet<unites_relation> _unites_relations;
		
		private EntitySet<movement> _movements;
		
		private EntityRef<store> _store;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onstore_idChanging(int value);
    partial void Onstore_idChanged();
    partial void OnlockerChanging(string value);
    partial void OnlockerChanged();
    partial void OnrowChanging(string value);
    partial void OnrowChanged();
    partial void OncellChanging(string value);
    partial void OncellChanged();
    partial void Onmain_unitChanging(int value);
    partial void Onmain_unitChanged();
    partial void OnrateChanging(int value);
    partial void OnrateChanged();
    partial void OnrequestLimitChanging(int value);
    partial void OnrequestLimitChanged();
    #endregion
		
		public item()
		{
			this._unites_relations = new EntitySet<unites_relation>(new Action<unites_relation>(this.attach_unites_relations), new Action<unites_relation>(this.detach_unites_relations));
			this._movements = new EntitySet<movement>(new Action<movement>(this.attach_movements), new Action<movement>(this.detach_movements));
			this._store = default(EntityRef<store>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_store_id", DbType="Int NOT NULL")]
		public int store_id
		{
			get
			{
				return this._store_id;
			}
			set
			{
				if ((this._store_id != value))
				{
					if (this._store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstore_idChanging(value);
					this.SendPropertyChanging();
					this._store_id = value;
					this.SendPropertyChanged("store_id");
					this.Onstore_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_locker", DbType="NVarChar(50)")]
		public string locker
		{
			get
			{
				return this._locker;
			}
			set
			{
				if ((this._locker != value))
				{
					this.OnlockerChanging(value);
					this.SendPropertyChanging();
					this._locker = value;
					this.SendPropertyChanged("locker");
					this.OnlockerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_row", DbType="NVarChar(50)")]
		public string row
		{
			get
			{
				return this._row;
			}
			set
			{
				if ((this._row != value))
				{
					this.OnrowChanging(value);
					this.SendPropertyChanging();
					this._row = value;
					this.SendPropertyChanged("row");
					this.OnrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cell", DbType="NVarChar(50)")]
		public string cell
		{
			get
			{
				return this._cell;
			}
			set
			{
				if ((this._cell != value))
				{
					this.OncellChanging(value);
					this.SendPropertyChanging();
					this._cell = value;
					this.SendPropertyChanged("cell");
					this.OncellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_main_unit", DbType="Int NOT NULL")]
		public int main_unit
		{
			get
			{
				return this._main_unit;
			}
			set
			{
				if ((this._main_unit != value))
				{
					this.Onmain_unitChanging(value);
					this.SendPropertyChanging();
					this._main_unit = value;
					this.SendPropertyChanged("main_unit");
					this.Onmain_unitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate", DbType="Int NOT NULL")]
		public int rate
		{
			get
			{
				return this._rate;
			}
			set
			{
				if ((this._rate != value))
				{
					this.OnrateChanging(value);
					this.SendPropertyChanging();
					this._rate = value;
					this.SendPropertyChanged("rate");
					this.OnrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_requestLimit", DbType="Int NOT NULL")]
		public int requestLimit
		{
			get
			{
				return this._requestLimit;
			}
			set
			{
				if ((this._requestLimit != value))
				{
					this.OnrequestLimitChanging(value);
					this.SendPropertyChanging();
					this._requestLimit = value;
					this.SendPropertyChanged("requestLimit");
					this.OnrequestLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_unites_relation", Storage="_unites_relations", ThisKey="id", OtherKey="item_id")]
		public EntitySet<unites_relation> unites_relations
		{
			get
			{
				return this._unites_relations;
			}
			set
			{
				this._unites_relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_movement", Storage="_movements", ThisKey="id", OtherKey="item_id")]
		public EntitySet<movement> movements
		{
			get
			{
				return this._movements;
			}
			set
			{
				this._movements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="store_item", Storage="_store", ThisKey="store_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public store store
		{
			get
			{
				return this._store.Entity;
			}
			set
			{
				store previousValue = this._store.Entity;
				if (((previousValue != value) 
							|| (this._store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._store.Entity = null;
						previousValue.items.Remove(this);
					}
					this._store.Entity = value;
					if ((value != null))
					{
						value.items.Add(this);
						this._store_id = value.id;
					}
					else
					{
						this._store_id = default(int);
					}
					this.SendPropertyChanged("store");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_unites_relations(unites_relation entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_unites_relations(unites_relation entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
		
		private void attach_movements(movement entity)
		{
			this.SendPropertyChanging();
			entity.item = this;
		}
		
		private void detach_movements(movement entity)
		{
			this.SendPropertyChanging();
			entity.item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _user_name;
		
		private string _pass;
		
		private string _type;
		
		private System.Nullable<int> _allowed_store;
		
		private EntitySet<user_store> _user_stores;
		
		private EntitySet<movements_header> _movements_headers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onuser_nameChanging(string value);
    partial void Onuser_nameChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void Onallowed_storeChanging(System.Nullable<int> value);
    partial void Onallowed_storeChanged();
    #endregion
		
		public user()
		{
			this._user_stores = new EntitySet<user_store>(new Action<user_store>(this.attach_user_stores), new Action<user_store>(this.detach_user_stores));
			this._movements_headers = new EntitySet<movements_header>(new Action<movements_header>(this.attach_movements_headers), new Action<movements_header>(this.detach_movements_headers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string user_name
		{
			get
			{
				return this._user_name;
			}
			set
			{
				if ((this._user_name != value))
				{
					this.Onuser_nameChanging(value);
					this.SendPropertyChanging();
					this._user_name = value;
					this.SendPropertyChanged("user_name");
					this.Onuser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_allowed_store", DbType="Int")]
		public System.Nullable<int> allowed_store
		{
			get
			{
				return this._allowed_store;
			}
			set
			{
				if ((this._allowed_store != value))
				{
					this.Onallowed_storeChanging(value);
					this.SendPropertyChanging();
					this._allowed_store = value;
					this.SendPropertyChanged("allowed_store");
					this.Onallowed_storeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_user_store", Storage="_user_stores", ThisKey="id", OtherKey="user_id")]
		public EntitySet<user_store> user_stores
		{
			get
			{
				return this._user_stores;
			}
			set
			{
				this._user_stores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_movements_header", Storage="_movements_headers", ThisKey="id", OtherKey="user_id")]
		public EntitySet<movements_header> movements_headers
		{
			get
			{
				return this._movements_headers;
			}
			set
			{
				this._movements_headers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_user_stores(user_store entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_user_stores(user_store entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_movements_headers(movements_header entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_movements_headers(movements_header entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.stores")]
	public partial class store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<item> _items;
		
		private EntitySet<user_store> _user_stores;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public store()
		{
			this._items = new EntitySet<item>(new Action<item>(this.attach_items), new Action<item>(this.detach_items));
			this._user_stores = new EntitySet<user_store>(new Action<user_store>(this.attach_user_stores), new Action<user_store>(this.detach_user_stores));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="store_item", Storage="_items", ThisKey="id", OtherKey="store_id")]
		public EntitySet<item> items
		{
			get
			{
				return this._items;
			}
			set
			{
				this._items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="store_user_store", Storage="_user_stores", ThisKey="id", OtherKey="store_id")]
		public EntitySet<user_store> user_stores
		{
			get
			{
				return this._user_stores;
			}
			set
			{
				this._user_stores.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.store = this;
		}
		
		private void detach_items(item entity)
		{
			this.SendPropertyChanging();
			entity.store = null;
		}
		
		private void attach_user_stores(user_store entity)
		{
			this.SendPropertyChanging();
			entity.store = this;
		}
		
		private void detach_user_stores(user_store entity)
		{
			this.SendPropertyChanging();
			entity.store = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.unites")]
	public partial class unite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<unites_relation> _unites_relations;
		
		private EntitySet<movement> _movements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public unite()
		{
			this._unites_relations = new EntitySet<unites_relation>(new Action<unites_relation>(this.attach_unites_relations), new Action<unites_relation>(this.detach_unites_relations));
			this._movements = new EntitySet<movement>(new Action<movement>(this.attach_movements), new Action<movement>(this.detach_movements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unite_unites_relation", Storage="_unites_relations", ThisKey="id", OtherKey="sup_unit")]
		public EntitySet<unites_relation> unites_relations
		{
			get
			{
				return this._unites_relations;
			}
			set
			{
				this._unites_relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unite_movement", Storage="_movements", ThisKey="id", OtherKey="unit_id")]
		public EntitySet<movement> movements
		{
			get
			{
				return this._movements;
			}
			set
			{
				this._movements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_unites_relations(unites_relation entity)
		{
			this.SendPropertyChanging();
			entity.unite = this;
		}
		
		private void detach_unites_relations(unites_relation entity)
		{
			this.SendPropertyChanging();
			entity.unite = null;
		}
		
		private void attach_movements(movement entity)
		{
			this.SendPropertyChanging();
			entity.unite = this;
		}
		
		private void detach_movements(movement entity)
		{
			this.SendPropertyChanging();
			entity.unite = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.unites_relations")]
	public partial class unites_relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _item_id;
		
		private int _sup_unit;
		
		private decimal _ratio;
		
		private EntityRef<item> _item;
		
		private EntityRef<unite> _unite;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onitem_idChanging(int value);
    partial void Onitem_idChanged();
    partial void Onsup_unitChanging(int value);
    partial void Onsup_unitChanged();
    partial void OnratioChanging(decimal value);
    partial void OnratioChanged();
    #endregion
		
		public unites_relation()
		{
			this._item = default(EntityRef<item>);
			this._unite = default(EntityRef<unite>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="Int NOT NULL")]
		public int item_id
		{
			get
			{
				return this._item_id;
			}
			set
			{
				if ((this._item_id != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitem_idChanging(value);
					this.SendPropertyChanging();
					this._item_id = value;
					this.SendPropertyChanged("item_id");
					this.Onitem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sup_unit", DbType="Int NOT NULL")]
		public int sup_unit
		{
			get
			{
				return this._sup_unit;
			}
			set
			{
				if ((this._sup_unit != value))
				{
					if (this._unite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsup_unitChanging(value);
					this.SendPropertyChanging();
					this._sup_unit = value;
					this.SendPropertyChanged("sup_unit");
					this.Onsup_unitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ratio", DbType="Decimal(18,0) NOT NULL")]
		public decimal ratio
		{
			get
			{
				return this._ratio;
			}
			set
			{
				if ((this._ratio != value))
				{
					this.OnratioChanging(value);
					this.SendPropertyChanging();
					this._ratio = value;
					this.SendPropertyChanged("ratio");
					this.OnratioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_unites_relation", Storage="_item", ThisKey="item_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.unites_relations.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.unites_relations.Add(this);
						this._item_id = value.id;
					}
					else
					{
						this._item_id = default(int);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unite_unites_relation", Storage="_unite", ThisKey="sup_unit", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public unite unite
		{
			get
			{
				return this._unite.Entity;
			}
			set
			{
				unite previousValue = this._unite.Entity;
				if (((previousValue != value) 
							|| (this._unite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._unite.Entity = null;
						previousValue.unites_relations.Remove(this);
					}
					this._unite.Entity = value;
					if ((value != null))
					{
						value.unites_relations.Add(this);
						this._sup_unit = value.id;
					}
					else
					{
						this._sup_unit = default(int);
					}
					this.SendPropertyChanged("unite");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_store")]
	public partial class user_store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private int _store_id;
		
		private EntityRef<store> _store;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onstore_idChanging(int value);
    partial void Onstore_idChanged();
    #endregion
		
		public user_store()
		{
			this._store = default(EntityRef<store>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_store_id", DbType="Int NOT NULL")]
		public int store_id
		{
			get
			{
				return this._store_id;
			}
			set
			{
				if ((this._store_id != value))
				{
					if (this._store.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstore_idChanging(value);
					this.SendPropertyChanging();
					this._store_id = value;
					this.SendPropertyChanged("store_id");
					this.Onstore_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="store_user_store", Storage="_store", ThisKey="store_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public store store
		{
			get
			{
				return this._store.Entity;
			}
			set
			{
				store previousValue = this._store.Entity;
				if (((previousValue != value) 
							|| (this._store.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._store.Entity = null;
						previousValue.user_stores.Remove(this);
					}
					this._store.Entity = value;
					if ((value != null))
					{
						value.user_stores.Add(this);
						this._store_id = value.id;
					}
					else
					{
						this._store_id = default(int);
					}
					this.SendPropertyChanged("store");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_user_store", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.user_stores.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.user_stores.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.movements")]
	public partial class movement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _item_id;
		
		private decimal _qty;
		
		private int _unit_id;
		
		private System.Nullable<int> _mvt_id;
		
		private System.Nullable<decimal> _qty_unit;
		
		private EntityRef<item> _item;
		
		private EntityRef<unite> _unite;
		
		private EntityRef<movements_header> _movements_header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onitem_idChanging(int value);
    partial void Onitem_idChanged();
    partial void OnqtyChanging(decimal value);
    partial void OnqtyChanged();
    partial void Onunit_idChanging(int value);
    partial void Onunit_idChanged();
    partial void Onmvt_idChanging(System.Nullable<int> value);
    partial void Onmvt_idChanged();
    partial void Onqty_unitChanging(System.Nullable<decimal> value);
    partial void Onqty_unitChanged();
    #endregion
		
		public movement()
		{
			this._item = default(EntityRef<item>);
			this._unite = default(EntityRef<unite>);
			this._movements_header = default(EntityRef<movements_header>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item_id", DbType="Int NOT NULL")]
		public int item_id
		{
			get
			{
				return this._item_id;
			}
			set
			{
				if ((this._item_id != value))
				{
					if (this._item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onitem_idChanging(value);
					this.SendPropertyChanging();
					this._item_id = value;
					this.SendPropertyChanged("item_id");
					this.Onitem_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qty", DbType="Decimal(18,2) NOT NULL")]
		public decimal qty
		{
			get
			{
				return this._qty;
			}
			set
			{
				if ((this._qty != value))
				{
					this.OnqtyChanging(value);
					this.SendPropertyChanging();
					this._qty = value;
					this.SendPropertyChanged("qty");
					this.OnqtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unit_id", DbType="Int NOT NULL")]
		public int unit_id
		{
			get
			{
				return this._unit_id;
			}
			set
			{
				if ((this._unit_id != value))
				{
					if (this._unite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onunit_idChanging(value);
					this.SendPropertyChanging();
					this._unit_id = value;
					this.SendPropertyChanged("unit_id");
					this.Onunit_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mvt_id", DbType="Int")]
		public System.Nullable<int> mvt_id
		{
			get
			{
				return this._mvt_id;
			}
			set
			{
				if ((this._mvt_id != value))
				{
					if (this._movements_header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmvt_idChanging(value);
					this.SendPropertyChanging();
					this._mvt_id = value;
					this.SendPropertyChanged("mvt_id");
					this.Onmvt_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qty_unit", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> qty_unit
		{
			get
			{
				return this._qty_unit;
			}
			set
			{
				if ((this._qty_unit != value))
				{
					this.Onqty_unitChanging(value);
					this.SendPropertyChanging();
					this._qty_unit = value;
					this.SendPropertyChanged("qty_unit");
					this.Onqty_unitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="item_movement", Storage="_item", ThisKey="item_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public item item
		{
			get
			{
				return this._item.Entity;
			}
			set
			{
				item previousValue = this._item.Entity;
				if (((previousValue != value) 
							|| (this._item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._item.Entity = null;
						previousValue.movements.Remove(this);
					}
					this._item.Entity = value;
					if ((value != null))
					{
						value.movements.Add(this);
						this._item_id = value.id;
					}
					else
					{
						this._item_id = default(int);
					}
					this.SendPropertyChanged("item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="unite_movement", Storage="_unite", ThisKey="unit_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public unite unite
		{
			get
			{
				return this._unite.Entity;
			}
			set
			{
				unite previousValue = this._unite.Entity;
				if (((previousValue != value) 
							|| (this._unite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._unite.Entity = null;
						previousValue.movements.Remove(this);
					}
					this._unite.Entity = value;
					if ((value != null))
					{
						value.movements.Add(this);
						this._unit_id = value.id;
					}
					else
					{
						this._unit_id = default(int);
					}
					this.SendPropertyChanged("unite");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movements_header_movement", Storage="_movements_header", ThisKey="mvt_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public movements_header movements_header
		{
			get
			{
				return this._movements_header.Entity;
			}
			set
			{
				movements_header previousValue = this._movements_header.Entity;
				if (((previousValue != value) 
							|| (this._movements_header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._movements_header.Entity = null;
						previousValue.movements.Remove(this);
					}
					this._movements_header.Entity = value;
					if ((value != null))
					{
						value.movements.Add(this);
						this._mvt_id = value.id;
					}
					else
					{
						this._mvt_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("movements_header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.movements_header")]
	public partial class movements_header : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _place;
		
		private string _reciever;
		
		private int _store_id;
		
		private System.DateTime _date;
		
		private int _user_id;
		
		private int _approved;
		
		private System.Nullable<int> _userApproved;
		
		private string _type;
		
		private int _number;
		
		private EntitySet<movement> _movements;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnplaceChanging(string value);
    partial void OnplaceChanged();
    partial void OnrecieverChanging(string value);
    partial void OnrecieverChanged();
    partial void Onstore_idChanging(int value);
    partial void Onstore_idChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnapprovedChanging(int value);
    partial void OnapprovedChanged();
    partial void OnuserApprovedChanging(System.Nullable<int> value);
    partial void OnuserApprovedChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnnumberChanging(int value);
    partial void OnnumberChanged();
    #endregion
		
		public movements_header()
		{
			this._movements = new EntitySet<movement>(new Action<movement>(this.attach_movements), new Action<movement>(this.detach_movements));
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_place", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string place
		{
			get
			{
				return this._place;
			}
			set
			{
				if ((this._place != value))
				{
					this.OnplaceChanging(value);
					this.SendPropertyChanging();
					this._place = value;
					this.SendPropertyChanged("place");
					this.OnplaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reciever", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string reciever
		{
			get
			{
				return this._reciever;
			}
			set
			{
				if ((this._reciever != value))
				{
					this.OnrecieverChanging(value);
					this.SendPropertyChanging();
					this._reciever = value;
					this.SendPropertyChanged("reciever");
					this.OnrecieverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_store_id", DbType="Int NOT NULL")]
		public int store_id
		{
			get
			{
				return this._store_id;
			}
			set
			{
				if ((this._store_id != value))
				{
					this.Onstore_idChanging(value);
					this.SendPropertyChanging();
					this._store_id = value;
					this.SendPropertyChanged("store_id");
					this.Onstore_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_approved", DbType="Int NOT NULL")]
		public int approved
		{
			get
			{
				return this._approved;
			}
			set
			{
				if ((this._approved != value))
				{
					this.OnapprovedChanging(value);
					this.SendPropertyChanging();
					this._approved = value;
					this.SendPropertyChanged("approved");
					this.OnapprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userApproved", DbType="Int")]
		public System.Nullable<int> userApproved
		{
			get
			{
				return this._userApproved;
			}
			set
			{
				if ((this._userApproved != value))
				{
					this.OnuserApprovedChanging(value);
					this.SendPropertyChanging();
					this._userApproved = value;
					this.SendPropertyChanged("userApproved");
					this.OnuserApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int NOT NULL")]
		public int number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="movements_header_movement", Storage="_movements", ThisKey="id", OtherKey="mvt_id")]
		public EntitySet<movement> movements
		{
			get
			{
				return this._movements;
			}
			set
			{
				this._movements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_movements_header", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.movements_headers.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.movements_headers.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_movements(movement entity)
		{
			this.SendPropertyChanging();
			entity.movements_header = this;
		}
		
		private void detach_movements(movement entity)
		{
			this.SendPropertyChanging();
			entity.movements_header = null;
		}
	}
}
#pragma warning restore 1591
